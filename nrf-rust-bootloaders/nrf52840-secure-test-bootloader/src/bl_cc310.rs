/* automatically generated by rust-bindgen */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const SASI_INFINITE: u32 = 4294967295;
pub const SASI_SUCCESS: u32 = 0;
pub const SASI_FAIL: u32 = 1;
pub const SASI_1K_SIZE_IN_BYTES: u32 = 1024;
pub const SASI_BITS_IN_BYTE: u32 = 8;
pub const SASI_BITS_IN_32BIT_WORD: u32 = 32;
pub const SASI_OK: u32 = 0;
pub const SASI_MAX_UINT32_VAL: u32 = 4294967295;
pub const CRYS_ERROR_BASE: u32 = 15728640;
pub const CRYS_ERROR_LAYER_RANGE: u32 = 65536;
pub const CRYS_ERROR_MODULE_RANGE: u32 = 256;
pub const CRYS_LAYER_ERROR_IDX: u32 = 0;
pub const LLF_LAYER_ERROR_IDX: u32 = 1;
pub const GENERIC_ERROR_IDX: u32 = 5;
pub const AES_ERROR_IDX: u32 = 0;
pub const DES_ERROR_IDX: u32 = 1;
pub const HASH_ERROR_IDX: u32 = 2;
pub const HMAC_ERROR_IDX: u32 = 3;
pub const RSA_ERROR_IDX: u32 = 4;
pub const DH_ERROR_IDX: u32 = 5;
pub const ECPKI_ERROR_IDX: u32 = 8;
pub const RND_ERROR_IDX: u32 = 12;
pub const COMMON_ERROR_IDX: u32 = 13;
pub const KDF_ERROR_IDX: u32 = 17;
pub const HKDF_ERROR_IDX: u32 = 18;
pub const AESCCM_ERROR_IDX: u32 = 21;
pub const FIPS_ERROR_IDX: u32 = 23;
pub const PKA_MODULE_ERROR_IDX: u32 = 33;
pub const CHACHA_ERROR_IDX: u32 = 34;
pub const EC_MONT_EDW_ERROR_IDX: u32 = 35;
pub const CHACHA_POLY_ERROR_IDX: u32 = 36;
pub const POLY_ERROR_IDX: u32 = 37;
pub const SRP_ERROR_IDX: u32 = 38;
pub const CRYS_AES_MODULE_ERROR_BASE: u32 = 15728640;
pub const CRYS_DES_MODULE_ERROR_BASE: u32 = 15728896;
pub const CRYS_HASH_MODULE_ERROR_BASE: u32 = 15729152;
pub const CRYS_HMAC_MODULE_ERROR_BASE: u32 = 15729408;
pub const CRYS_RSA_MODULE_ERROR_BASE: u32 = 15729664;
pub const CRYS_DH_MODULE_ERROR_BASE: u32 = 15729920;
pub const CRYS_ECPKI_MODULE_ERROR_BASE: u32 = 15730688;
pub const LLF_ECPKI_MODULE_ERROR_BASE: u32 = 15796224;
pub const CRYS_RND_MODULE_ERROR_BASE: u32 = 15731712;
pub const LLF_RND_MODULE_ERROR_BASE: u32 = 15797248;
pub const CRYS_COMMON_MODULE_ERROR_BASE: u32 = 15731968;
pub const CRYS_KDF_MODULE_ERROR_BASE: u32 = 15732992;
pub const CRYS_HKDF_MODULE_ERROR_BASE: u32 = 15733248;
pub const CRYS_AESCCM_MODULE_ERROR_BASE: u32 = 15734016;
pub const CRYS_FIPS_MODULE_ERROR_BASE: u32 = 15734528;
pub const PKA_MODULE_ERROR_BASE: u32 = 15737088;
pub const CRYS_CHACHA_MODULE_ERROR_BASE: u32 = 15737344;
pub const CRYS_CHACHA_POLY_MODULE_ERROR_BASE: u32 = 15737856;
pub const CRYS_POLY_MODULE_ERROR_BASE: u32 = 15738112;
pub const CRYS_SRP_MODULE_ERROR_BASE: u32 = 15738368;
pub const CRYS_EC_MONT_EDW_MODULE_ERROR_BASE: u32 = 15737600;
pub const GENERIC_ERROR_BASE: u32 = 16056320;
pub const CRYS_FATAL_ERROR: u32 = 16056320;
pub const CRYS_OUT_OF_RESOURCE_ERROR: u32 = 16056321;
pub const CRYS_ILLEGAL_RESOURCE_VAL_ERROR: u32 = 16056322;
pub const CRYS_OK: u32 = 0;
pub const NRF_CC310_BL_ECDSA_CONTEXT_INITIALIZED: u32 = 3148502493;
pub const NRF_CC310_BL_ECDSA_VERIFY_CONTEXT_SIZE_SECP224R1: u32 = 140;
pub const NRF_CC310_BL_ECDSA_VERIFY_CONTEXT_SIZE_SECP256R1: u32 = 160;
pub const NRF_CC310_BL_HASH_CONTEXT_INITIALIZED: u32 = 3148502493;
pub const NRF_CC310_BL_HASH_CONTEXT_BUFFER_SIZE_SHA256: u32 = 112;
pub const NRF_CC310_BL_SHA256_DIGEST_SIZE_IN_WORDS: u32 = 8;
pub const NRF_CC310_BL_SHA256_DIGEST_SIZE_IN_BYTES: u32 = 32;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = cty::c_longlong;
pub type uintmax_t = cty::c_ulonglong;
pub type size_t = cty::c_uint;
pub type wchar_t = cty::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: cty::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        16usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        8usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type SaSiVirtAddr_t = usize;
pub type SaSiBool_t = u32;
pub type SaSiStatus = u32;
#[doc = " Boolean false definition."]
pub const SaSiBool_SASI_FALSE: SaSiBool = 0;
#[doc = " Boolean true definition."]
pub const SaSiBool_SASI_TRUE: SaSiBool = 1;
#[doc = " Boolean definition."]
pub type SaSiBool = u32;
#[doc = " The typedef definition of all of the error codes that are returned from the CRYS functions"]
pub type CRYSError_t = u32;
#[doc = "@brief Structure holding the secp224r1 public key represented by X,Y coordinates (uncompressed)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrf_cc310_bl_ecc_public_key_secp224r1_t {
    #[doc = "!< Public key X coordinate in big-endian format."]
    pub x: [u8; 28usize],
    #[doc = "!< Public key Y coordinate in big-endian format."]
    pub y: [u8; 28usize],
}
#[test]
fn bindgen_test_layout_nrf_cc310_bl_ecc_public_key_secp224r1_t() {
    assert_eq!(
        ::core::mem::size_of::<nrf_cc310_bl_ecc_public_key_secp224r1_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(nrf_cc310_bl_ecc_public_key_secp224r1_t)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<nrf_cc310_bl_ecc_public_key_secp224r1_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(nrf_cc310_bl_ecc_public_key_secp224r1_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_ecc_public_key_secp224r1_t>())).x as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_ecc_public_key_secp224r1_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_ecc_public_key_secp224r1_t>())).y as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_ecc_public_key_secp224r1_t),
            "::",
            stringify!(y)
        )
    );
}
#[doc = "@brief Structure holding secp224r1 signature represented by R,S."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrf_cc310_bl_ecc_signature_secp224r1_t {
    #[doc = "!< Signature R part in big-endian format."]
    pub r: [u8; 28usize],
    #[doc = "!< Signature S part in big-endian format."]
    pub s: [u8; 28usize],
}
#[test]
fn bindgen_test_layout_nrf_cc310_bl_ecc_signature_secp224r1_t() {
    assert_eq!(
        ::core::mem::size_of::<nrf_cc310_bl_ecc_signature_secp224r1_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(nrf_cc310_bl_ecc_signature_secp224r1_t)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<nrf_cc310_bl_ecc_signature_secp224r1_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(nrf_cc310_bl_ecc_signature_secp224r1_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_ecc_signature_secp224r1_t>())).r as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_ecc_signature_secp224r1_t),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_ecc_signature_secp224r1_t>())).s as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_ecc_signature_secp224r1_t),
            "::",
            stringify!(s)
        )
    );
}
#[doc = "@brief   Type definition for a context structure for running an ECDSA verify operation using"]
#[doc = "          curve secp224r1."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nrf_cc310_bl_ecdsa_verify_context_secp224r1_t {
    #[doc = "!< Value indicating the initialized state of the context structure."]
    pub init_val: u32,
    #[doc = "!< Buffer containing the required memory for running the ECDSA verify operation."]
    pub context_buffer: [u8; 140usize],
}
#[test]
fn bindgen_test_layout_nrf_cc310_bl_ecdsa_verify_context_secp224r1_t() {
    assert_eq!(
        ::core::mem::size_of::<nrf_cc310_bl_ecdsa_verify_context_secp224r1_t>(),
        144usize,
        concat!(
            "Size of: ",
            stringify!(nrf_cc310_bl_ecdsa_verify_context_secp224r1_t)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<nrf_cc310_bl_ecdsa_verify_context_secp224r1_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(nrf_cc310_bl_ecdsa_verify_context_secp224r1_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_ecdsa_verify_context_secp224r1_t>())).init_val
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_ecdsa_verify_context_secp224r1_t),
            "::",
            stringify!(init_val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_ecdsa_verify_context_secp224r1_t>()))
                .context_buffer as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_ecdsa_verify_context_secp224r1_t),
            "::",
            stringify!(context_buffer)
        )
    );
}
extern "C" {
    #[doc = "@brief Function for initializing the context information for an ECDSA verify operation"]
    #[doc = "        using curve secp224r1."]
    #[doc = ""]
    #[doc = " @note    The memory that holds the context object must be allocated prior to this call."]
    #[doc = ""]
    #[doc = " @param[in,out]   p_context       Pointer to the structure holding context information"]
    #[doc = " *                                for the ECDSA verify operation."]
    #[doc = " @param[in]       p_public_key    Pointer to the structure holding the public key for the"]
    #[doc = "                                  ECDSA verify operation."]
    #[doc = ""]
    #[doc = " @retval CRYS_OK                                                 Context initialized succesfully."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_USER_CONTEXT_PTR_ERROR        p_context was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_SIGNER_PUBL_KEY_VALIDATION_TAG_ERROR  p_public_key was NULL."]
    pub fn nrf_cc310_bl_ecdsa_verify_init_secp224r1(
        p_context: *mut nrf_cc310_bl_ecdsa_verify_context_secp224r1_t,
        p_public_key: *const nrf_cc310_bl_ecc_public_key_secp224r1_t,
    ) -> CRYSError_t;
}
extern "C" {
    #[doc = "@brief Function for executing an ECDSA verify on secp224r1 with hash input."]
    #[doc = ""]
    #[doc = " @note    The ECDSA verify context structure must be initialized prior to this call"]
    #[doc = "          using @ref nrf_cc310_bl_ecdsa_verify_init_secp224r1."]
    #[doc = ""]
    #[doc = " @param[in,out]   p_context   Pointer to the structure holding context information for"]
    #[doc = "                              the ECDSA verify operation."]
    #[doc = " @param[in]       p_signature Pointer to the structure holding the signature to use for the"]
    #[doc = "                               ECDSA verify operation."]
    #[doc = " @param[in]       p_hash      Pointer to the hash to use in the ECDSA verify operation."]
    #[doc = " @param[in]       hash_len    Length of the hash to verify."]
    #[doc = ""]
    #[doc = " @retval CRYS_OK Signature was successfully verified."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_USER_CONTEXT_PTR_ERROR     p_context was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_USER_CONTEXT_VALIDATION_TAG_ERROR  p_context was not initialized."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_SIGNATURE_IN_PTR_ERROR     p_signature was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_MESSAGE_DATA_IN_PTR_ERROR  p_hash was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_MESSAGE_DATA_IN_SIZE_ERROR hash_len was invalid."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INCONSISTENT_VERIFY_ERROR          Signature verification failed."]
    pub fn nrf_cc310_bl_ecdsa_verify_hash_secp224r1(
        p_context: *mut nrf_cc310_bl_ecdsa_verify_context_secp224r1_t,
        p_signature: *const nrf_cc310_bl_ecc_signature_secp224r1_t,
        p_hash: *const u8,
        hash_len: u32,
    ) -> CRYSError_t;
}
extern "C" {
    #[doc = "@brief Function for executing an ECDSA verify on secp224r1 with hash input in integrated form."]
    #[doc = ""]
    #[doc = " @note This will run initialization of ECDSA context and run ECDSA verify in"]
    #[doc = "        a single integrated step."]
    #[doc = ""]
    #[doc = " @param[in,out]   p_context       Pointer to the structure holding context information"]
    #[doc = "                                  for the ECDSA verify operation."]
    #[doc = " @param[in]       p_public_key    Pointer to the structure holding the public key for"]
    #[doc = "                                  the ECDSA verify operation."]
    #[doc = " @param[in]       p_signature     Pointer to the structure holding the signature to use"]
    #[doc = "                                  for the ECDSA verify operation."]
    #[doc = " @param[in]       p_hash          Pointer to the hash to use in the ECDSA verify operation."]
    #[doc = " @param[in]       hash_len        Length of the hash to verify."]
    #[doc = ""]
    #[doc = " @retval CRYS_OK Signature was successfully verified."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_USER_CONTEXT_PTR_ERROR     p_context was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_USER_CONTEXT_VALIDATION_TAG_ERROR  p_context was not initialized."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_SIGNER_PUBL_KEY_VALIDATION_TAG_ERROR"]
    #[doc = "         p_public_key was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_SIGNATURE_IN_PTR_ERROR     p_signature was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_MESSAGE_DATA_IN_PTR_ERROR  p_hash was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_MESSAGE_DATA_IN_SIZE_ERROR hash_len was invalid."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INCONSISTENT_VERIFY_ERROR          Signature verification failed."]
    pub fn nrf_cc310_bl_ecdsa_verify_secp224r1(
        p_context: *mut nrf_cc310_bl_ecdsa_verify_context_secp224r1_t,
        p_public_key: *const nrf_cc310_bl_ecc_public_key_secp224r1_t,
        p_signature: *const nrf_cc310_bl_ecc_signature_secp224r1_t,
        p_hash: *const u8,
        hash_len: u32,
    ) -> CRYSError_t;
}
#[doc = "@brief Structure holding the secp256r1 public key represented by X,Y coordinates."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrf_cc310_bl_ecc_public_key_secp256r1_t {
    #[doc = "!< Public key X coordinate in big-endian format."]
    pub x: [u8; 32usize],
    #[doc = "!< Public key Y coordinate in big-endian format."]
    pub y: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_nrf_cc310_bl_ecc_public_key_secp256r1_t() {
    assert_eq!(
        ::core::mem::size_of::<nrf_cc310_bl_ecc_public_key_secp256r1_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(nrf_cc310_bl_ecc_public_key_secp256r1_t)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<nrf_cc310_bl_ecc_public_key_secp256r1_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(nrf_cc310_bl_ecc_public_key_secp256r1_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_ecc_public_key_secp256r1_t>())).x as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_ecc_public_key_secp256r1_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_ecc_public_key_secp256r1_t>())).y as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_ecc_public_key_secp256r1_t),
            "::",
            stringify!(y)
        )
    );
}
#[doc = "@brief Structure holding the secp256r1 signature represented by R,S values."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrf_cc310_bl_ecc_signature_secp256r1_t {
    #[doc = "!< Signature R part in big-endian format."]
    pub r: [u8; 32usize],
    #[doc = "!< Signature S part in big-endian format."]
    pub s: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_nrf_cc310_bl_ecc_signature_secp256r1_t() {
    assert_eq!(
        ::core::mem::size_of::<nrf_cc310_bl_ecc_signature_secp256r1_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(nrf_cc310_bl_ecc_signature_secp256r1_t)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<nrf_cc310_bl_ecc_signature_secp256r1_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(nrf_cc310_bl_ecc_signature_secp256r1_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_ecc_signature_secp256r1_t>())).r as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_ecc_signature_secp256r1_t),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_ecc_signature_secp256r1_t>())).s as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_ecc_signature_secp256r1_t),
            "::",
            stringify!(s)
        )
    );
}
#[doc = "@brief Structure holding memory required for allocation of CC310 ECDSA verify context"]
#[doc = "        using curve secp256r1."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nrf_cc310_bl_ecdsa_verify_context_secp256r1_t {
    pub init_val: u32,
    pub context_buffer: [u8; 160usize],
}
#[test]
fn bindgen_test_layout_nrf_cc310_bl_ecdsa_verify_context_secp256r1_t() {
    assert_eq!(
        ::core::mem::size_of::<nrf_cc310_bl_ecdsa_verify_context_secp256r1_t>(),
        164usize,
        concat!(
            "Size of: ",
            stringify!(nrf_cc310_bl_ecdsa_verify_context_secp256r1_t)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<nrf_cc310_bl_ecdsa_verify_context_secp256r1_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(nrf_cc310_bl_ecdsa_verify_context_secp256r1_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_ecdsa_verify_context_secp256r1_t>())).init_val
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_ecdsa_verify_context_secp256r1_t),
            "::",
            stringify!(init_val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_ecdsa_verify_context_secp256r1_t>()))
                .context_buffer as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_ecdsa_verify_context_secp256r1_t),
            "::",
            stringify!(context_buffer)
        )
    );
}
extern "C" {
    #[doc = "@brief Function for initializing the context information for an ECDSA verify operation."]
    #[doc = ""]
    #[doc = " @note    The memory that holds the context object must be allocated prior to this call."]
    #[doc = ""]
    #[doc = " @param[in,out]   p_context       Pointer to the structure holding context information"]
    #[doc = "                                  for the ECDSA verify operation."]
    #[doc = " @param[in]       p_public_key    Pointer to the structure holding the public key for"]
    #[doc = "                                  the ECDSA verify operation."]
    #[doc = ""]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_USER_CONTEXT_PTR_ERROR        p_context was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_SIGNER_PUBL_KEY_VALIDATION_TAG_ERROR  p_public_key was NULL."]
    pub fn nrf_cc310_bl_ecdsa_verify_init_secp256r1(
        p_context: *mut nrf_cc310_bl_ecdsa_verify_context_secp256r1_t,
        p_public_key: *const nrf_cc310_bl_ecc_public_key_secp256r1_t,
    ) -> CRYSError_t;
}
extern "C" {
    #[doc = "@brief Function for executing an ECDSA verify operation using secp256r1 with hash input."]
    #[doc = ""]
    #[doc = " @note    The ECDSA verify context structure must be initialized prior to this call using"]
    #[doc = "          @ref nrf_cc310_bl_ecdsa_verify_init_secp256r1."]
    #[doc = ""]
    #[doc = " @param[in,out]   p_context   Pointer to the structure holding context information"]
    #[doc = "                              for the ECDSA verify operation."]
    #[doc = " @param[in]       p_signature Pointer to the structure holding the signature to use for"]
    #[doc = "                              the ECDSA verify operation."]
    #[doc = " @param[in]       p_hash      Pointer to the hash to use in the ECDSA verify operation."]
    #[doc = " @param[in]       hash_len    Length of the hash to verify."]
    #[doc = ""]
    #[doc = " @retval CRYS_OK Signature was successfully verified."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_USER_CONTEXT_PTR_ERROR     p_context was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_USER_CONTEXT_VALIDATION_TAG_ERROR  p_context was not initialized."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_SIGNATURE_IN_PTR_ERROR     p_signature was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_MESSAGE_DATA_IN_PTR_ERROR  p_hash was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_MESSAGE_DATA_IN_SIZE_ERROR hash_len was invalid."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INCONSISTENT_VERIFY_ERROR          Signature verification failed."]
    pub fn nrf_cc310_bl_ecdsa_verify_hash_secp256r1(
        p_context: *mut nrf_cc310_bl_ecdsa_verify_context_secp256r1_t,
        p_signature: *const nrf_cc310_bl_ecc_signature_secp256r1_t,
        p_hash: *const u8,
        hash_len: u32,
    ) -> CRYSError_t;
}
extern "C" {
    #[doc = "@brief Function for executing an ECDSA verify operation using secp256r1 with"]
    #[doc = "                                  hash input in integrated form."]
    #[doc = ""]
    #[doc = " @note This will run initialization of ECDSA context and run ECDSA verify in a single step."]
    #[doc = ""]
    #[doc = " @param[in,out]   p_context       Pointer to the structure holding context information for"]
    #[doc = "                                  the ECDSA verify operation."]
    #[doc = " @param[in]       p_public_key    Pointer to the structure holding the public key for"]
    #[doc = "                                  the ECDSA verify operation."]
    #[doc = " @param[in]       p_signature     Pointer to the structure holding the signature to use"]
    #[doc = "                                  for the ECDSA verify operation."]
    #[doc = " @param[in]       p_hash          Pointer to the hash to use in the ECDSA verify operation."]
    #[doc = " @param[in]       hash_len        Length of the hash to verify."]
    #[doc = ""]
    #[doc = " @retval CRYS_OK Signature was successfully verified."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_USER_CONTEXT_PTR_ERROR     p_context was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_USER_CONTEXT_VALIDATION_TAG_ERROR  p_context was not initialized."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_SIGNER_PUBL_KEY_VALIDATION_TAG_ERROR"]
    #[doc = "         p_public_key was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_SIGNATURE_IN_PTR_ERROR     p_signature was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_MESSAGE_DATA_IN_PTR_ERROR  p_hash was NULL."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INVALID_MESSAGE_DATA_IN_SIZE_ERROR hash_len was invalid."]
    #[doc = " @retval CRYS_ECDSA_VERIFY_INCONSISTENT_VERIFY_ERROR          Signature verification failed."]
    pub fn nrf_cc310_bl_ecdsa_verify_secp256r1(
        p_context: *mut nrf_cc310_bl_ecdsa_verify_context_secp256r1_t,
        p_public_key: *const nrf_cc310_bl_ecc_public_key_secp256r1_t,
        p_signature: *const nrf_cc310_bl_ecc_signature_secp256r1_t,
        p_hash: *const u8,
        hash_len: u32,
    ) -> CRYSError_t;
}
#[doc = "@brief Structure to hold SHA-256 context information."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nrf_cc310_bl_hash_context_sha256_t {
    pub init_val: u32,
    pub context_buffer: [u8; 112usize],
}
#[test]
fn bindgen_test_layout_nrf_cc310_bl_hash_context_sha256_t() {
    assert_eq!(
        ::core::mem::size_of::<nrf_cc310_bl_hash_context_sha256_t>(),
        116usize,
        concat!("Size of: ", stringify!(nrf_cc310_bl_hash_context_sha256_t))
    );
    assert_eq!(
        ::core::mem::align_of::<nrf_cc310_bl_hash_context_sha256_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(nrf_cc310_bl_hash_context_sha256_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_hash_context_sha256_t>())).init_val as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_hash_context_sha256_t),
            "::",
            stringify!(init_val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<nrf_cc310_bl_hash_context_sha256_t>())).context_buffer
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nrf_cc310_bl_hash_context_sha256_t),
            "::",
            stringify!(context_buffer)
        )
    );
}
#[doc = "@brief Array to hold SHA-256 hash digest."]
pub type nrf_cc310_bl_hash_digest_sha256_t = [u8; 32usize];
extern "C" {
    #[doc = "@brief Function for initializing the SHA-256 context."]
    #[doc = ""]
    #[doc = " @note Memory pointed to in hash context must be allocated prior to this call."]
    #[doc = ""]
    #[doc = " @param[in,out]   p_hash_context  Structure holding context information for"]
    #[doc = "                                  the SHA-256 operation."]
    #[doc = ""]
    #[doc = " @retval CRYS_OK If call was successful."]
    #[doc = " @retval  CRYS_HASH_INVALID_USER_CONTEXT_POINTER_ERROR    p_hash_context was NULL."]
    pub fn nrf_cc310_bl_hash_sha256_init(
        p_hash_context: *mut nrf_cc310_bl_hash_context_sha256_t,
    ) -> CRYSError_t;
}
extern "C" {
    #[doc = " @brief Function for running an update to the SHA-256 hash calculation."]
    #[doc = ""]
    #[doc = " @param[in,out]   p_hash_context  Structure holding context information"]
    #[doc = "                                  for the SHA-256 operation."]
    #[doc = ""]
    #[doc = " @retval CRYS_OK If call was successful."]
    #[doc = " @retval CRYS_HASH_INVALID_USER_CONTEXT_POINTER_ERROR    p_hash_context was NULL."]
    #[doc = " @retval CRYS_HASH_USER_CONTEXT_CORRUPTED_ERROR          p_hash_context not initialized."]
    #[doc = " @retval CRYS_HASH_LAST_BLOCK_ALREADY_PROCESSED_ERROR    p_hash_context already finalized."]
    pub fn nrf_cc310_bl_hash_sha256_update(
        p_hash_context: *mut nrf_cc310_bl_hash_context_sha256_t,
        p_src: *const u8,
        len: u32,
    ) -> CRYSError_t;
}
extern "C" {
    #[doc = " @brief Function for finalizing the hash calculation."]
    #[doc = ""]
    #[doc = "  @note Memory pointed to in hash digest must be allocated prior to this call."]
    #[doc = ""]
    #[doc = " @param[in,out]   p_hash_context  Structure holding context information for"]
    #[doc = "                                  the SHA-256 operation."]
    #[doc = " @param[in,out]   p_hash_digest   Pointer to the structure holding SHA-256"]
    #[doc = "                                  hash digest. Data pointed to must be 32 bytes long."]
    #[doc = ""]
    #[doc = " @retval  CRYS_HASH_INVALID_USER_CONTEXT_POINTER_ERROR    p_hash_context was NULL."]
    #[doc = " @retval  CRYS_HASH_USER_CONTEXT_CORRUPTED_ERROR          p_hash_context was corrupted."]
    #[doc = " @retval  CRYS_HASH_INVALID_RESULT_BUFFER_POINTER_ERROR   p_digest was NULL."]
    pub fn nrf_cc310_bl_hash_sha256_finalize(
        p_hash_context: *mut nrf_cc310_bl_hash_context_sha256_t,
        p_digest: *mut nrf_cc310_bl_hash_digest_sha256_t,
    ) -> CRYSError_t;
}
extern "C" {
    #[doc = "@file"]
    #[doc = ""]
    #[doc = " @addtogroup nrf_cc310_bl"]
    #[doc = " @{"]
    #[doc = " @brief Function for initializing the CC310 hardware and runtime library."]
    #[doc = ""]
    #[doc = " @note    Running this initialization is intended for cases where there"]
    #[doc = "          is no direct requirement for the RNG subsystem (all operations are deterministic)."]
    #[doc = ""]
    #[doc = " @retval  CRYS_OK     Initialization was successful."]
    pub fn nrf_cc310_bl_init() -> CRYSError_t;
}
